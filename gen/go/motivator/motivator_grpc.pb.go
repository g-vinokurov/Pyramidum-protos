// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: motivator/motivator.proto

package motivator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MotivatorServiceClient is the client API for MotivatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MotivatorServiceClient interface {
	StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error)
	Session(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	CommitResult(ctx context.Context, in *CommitResultRequest, opts ...grpc.CallOption) (*CommitResultResponse, error)
	StopSession(ctx context.Context, in *StopSessionRequest, opts ...grpc.CallOption) (*StopSessionResponse, error)
}

type motivatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMotivatorServiceClient(cc grpc.ClientConnInterface) MotivatorServiceClient {
	return &motivatorServiceClient{cc}
}

func (c *motivatorServiceClient) StartSession(ctx context.Context, in *StartSessionRequest, opts ...grpc.CallOption) (*StartSessionResponse, error) {
	out := new(StartSessionResponse)
	err := c.cc.Invoke(ctx, "/motivator.MotivatorService/StartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motivatorServiceClient) Session(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/motivator.MotivatorService/Session", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motivatorServiceClient) CommitResult(ctx context.Context, in *CommitResultRequest, opts ...grpc.CallOption) (*CommitResultResponse, error) {
	out := new(CommitResultResponse)
	err := c.cc.Invoke(ctx, "/motivator.MotivatorService/CommitResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motivatorServiceClient) StopSession(ctx context.Context, in *StopSessionRequest, opts ...grpc.CallOption) (*StopSessionResponse, error) {
	out := new(StopSessionResponse)
	err := c.cc.Invoke(ctx, "/motivator.MotivatorService/StopSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MotivatorServiceServer is the server API for MotivatorService service.
// All implementations must embed UnimplementedMotivatorServiceServer
// for forward compatibility
type MotivatorServiceServer interface {
	StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error)
	Session(context.Context, *SessionRequest) (*SessionResponse, error)
	CommitResult(context.Context, *CommitResultRequest) (*CommitResultResponse, error)
	StopSession(context.Context, *StopSessionRequest) (*StopSessionResponse, error)
	mustEmbedUnimplementedMotivatorServiceServer()
}

// UnimplementedMotivatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMotivatorServiceServer struct {
}

func (UnimplementedMotivatorServiceServer) StartSession(context.Context, *StartSessionRequest) (*StartSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedMotivatorServiceServer) Session(context.Context, *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedMotivatorServiceServer) CommitResult(context.Context, *CommitResultRequest) (*CommitResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitResult not implemented")
}
func (UnimplementedMotivatorServiceServer) StopSession(context.Context, *StopSessionRequest) (*StopSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSession not implemented")
}
func (UnimplementedMotivatorServiceServer) mustEmbedUnimplementedMotivatorServiceServer() {}

// UnsafeMotivatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MotivatorServiceServer will
// result in compilation errors.
type UnsafeMotivatorServiceServer interface {
	mustEmbedUnimplementedMotivatorServiceServer()
}

func RegisterMotivatorServiceServer(s grpc.ServiceRegistrar, srv MotivatorServiceServer) {
	s.RegisterService(&MotivatorService_ServiceDesc, srv)
}

func _MotivatorService_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotivatorServiceServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motivator.MotivatorService/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotivatorServiceServer).StartSession(ctx, req.(*StartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotivatorService_Session_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotivatorServiceServer).Session(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motivator.MotivatorService/Session",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotivatorServiceServer).Session(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotivatorService_CommitResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotivatorServiceServer).CommitResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motivator.MotivatorService/CommitResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotivatorServiceServer).CommitResult(ctx, req.(*CommitResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotivatorService_StopSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotivatorServiceServer).StopSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/motivator.MotivatorService/StopSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotivatorServiceServer).StopSession(ctx, req.(*StopSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MotivatorService_ServiceDesc is the grpc.ServiceDesc for MotivatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MotivatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "motivator.MotivatorService",
	HandlerType: (*MotivatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSession",
			Handler:    _MotivatorService_StartSession_Handler,
		},
		{
			MethodName: "Session",
			Handler:    _MotivatorService_Session_Handler,
		},
		{
			MethodName: "CommitResult",
			Handler:    _MotivatorService_CommitResult_Handler,
		},
		{
			MethodName: "StopSession",
			Handler:    _MotivatorService_StopSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "motivator/motivator.proto",
}
